from sqlalchemy import create_engine, Column, Integer, String, Boolean, Date
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime

DATABASE_URL = "sqlite:///./test.db"

engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

class CohortData(Base):
    __tablename__ = "cohort_data"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    study_code = Column(String, index=True)
    monogenic_complex_mixed = Column(String)
    city = Column(String)
    geographic_locality = Column(String)
    n_dna_samples_attempted = Column(Integer)
    total_qc_pass = Column(Integer)
    callrate_fails = Column(Integer)
    sex_fails = Column(Integer)
    het_fails = Column(Integer)
    duplicates = Column(Integer)
    # AFR = Column(Integer)
    # AAC = Column(Integer)
    # AJ = Column(Integer)
    # EAS = Column(Integer)
    # EUR = Column(Integer)
    # FIN = Column(Integer)
    # AMR = Column(Integer)
    # SAS = Column(Integer)
    # CAS = Column(Integer)
    # MDE = Column(Integer)
    # CAH = Column(Integer)
    # total = Column(Integer)
    genotyping_complete = Column(Boolean)
    imputation_panel = Column(String)
    imputation_complete = Column(Boolean)
    genotypes_shareable = Column(Boolean)
    gdpr = Column(Boolean)
    site = Column(String)
    afr_case = Column(Integer, nullable=True)
    afr_control = Column(Integer, nullable=True)
    afr_other = Column(Integer, nullable=True)
    aac_case = Column(Integer, nullable=True)
    aac_control = Column(Integer, nullable=True)
    aac_other = Column(Integer, nullable=True)
    aj_case = Column(Integer, nullable=True)
    aj_control = Column(Integer, nullable=True)
    aj_other = Column(Integer, nullable=True)
    eas_case = Column(Integer, nullable=True)
    eas_control = Column(Integer, nullable=True)
    eas_other = Column(Integer, nullable=True)
    eur_case = Column(Integer, nullable=True)
    eur_control = Column(Integer, nullable=True)
    eur_other = Column(Integer, nullable=True)
    fin_case = Column(Integer, nullable=True)
    fin_control = Column(Integer, nullable=True)
    fin_other = Column(Integer, nullable=True)
    amr_case = Column(Integer, nullable=True)
    amr_control = Column(Integer, nullable=True)
    amr_other = Column(Integer, nullable=True)
    sas_case = Column(Integer, nullable=True)
    sas_control = Column(Integer, nullable=True)
    sas_other = Column(Integer, nullable=True)
    cas_case = Column(Integer, nullable=True)
    cas_control = Column(Integer, nullable=True)
    cas_other = Column(Integer, nullable=True)
    mde_case = Column(Integer, nullable=True)
    mde_control = Column(Integer, nullable=True)
    mde_other = Column(Integer, nullable=True)
    cah_case = Column(Integer, nullable=True)
    cah_control = Column(Integer, nullable=True)
    cah_other = Column(Integer, nullable=True)
    total = Column(Integer, nullable=True)
    new = Column(Boolean, default=True)
    date_last_update = Column(Date, default=datetime.today())
    compliance = Column(Boolean, default=False)

Base.metadata.create_all(bind=engine)